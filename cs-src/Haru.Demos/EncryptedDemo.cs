/*
 * << Haru Free PDF Library >> -- EncryptedDemo.cs
 *
 * Demonstrates PDF encryption capabilities with different modes
 *
 * Copyright (c) 1999-2025 Haru Free PDF Library
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 */

using Haru.Doc;
using Haru.Font;
using Haru.Types;

namespace BasicDemos
{
    public static class EncryptedDemo
    {
        public static void Run()
        {
            try
            {
                // Create first demo: AES-128 encrypted PDF
                CreateAesEncryptedPdf();

                // Create second demo: RC4 40-bit with limited permissions
                CreatePermissionPdf();
            }
            catch (Exception e)
            {
                Console.Error.WriteLine($"Error in EncryptedDemo: {e.Message}");
                Console.Error.WriteLine($"Stack trace: {e.StackTrace}");
                throw;
            }
        }

        private static void CreateAesEncryptedPdf()
        {
            var pdf = new HpdfDocument();

            // Set document metadata
            pdf.Info.Title = "AES-128 Encrypted Document";
            pdf.Info.Author = "Haru Free PDF Library";
            pdf.Info.Creator = "EncryptedDemo.cs";
            pdf.Info.SetCreationDate(DateTime.Now);

            // Create default font
            var font = new HpdfFont(pdf.Xref, HpdfStandardFont.Helvetica, "F1");

            // Add a page
            var page = pdf.AddPage();
            page.Width = 595;  // A4 width
            page.Height = 842; // A4 height

            // Draw border
            page.SetLineWidth(1);
            page.Rectangle(50, 50, 495, 742);
            page.Stroke();

            // Draw title
            page.SetFontAndSize(font, 24);
            page.BeginText();
            page.MoveTextPos(100, 750);
            page.ShowText("AES-128 Encrypted PDF");
            page.EndText();

            // Draw content
            page.SetFontAndSize(font, 14);
            page.BeginText();
            page.MoveTextPos(100, 700);
            page.ShowText("Encryption: AES-128 (Revision 4)");
            page.MoveTextPos(0, -25);
            page.ShowText("User Password: user123");
            page.MoveTextPos(0, -20);
            page.ShowText("Owner Password: owner456");
            page.MoveTextPos(0, -40);
            page.ShowText("This document demonstrates AES-128 encryption,");
            page.MoveTextPos(0, -20);
            page.ShowText("the most secure encryption mode in PDF 1.6.");
            page.EndText();

            // Draw a colored box
            page.SetRgbFill(0.9f, 0.9f, 1.0f);
            page.SetRgbStroke(0.3f, 0.3f, 0.8f);
            page.SetLineWidth(2);
            page.Rectangle(80, 460, 435, 130);
            page.FillStroke();

            // Add more information
            page.SetRgbFill(0.0f, 0.0f, 0.0f);
            page.SetFontAndSize(font, 12);
            page.BeginText();
            page.MoveTextPos(100, 565);
            page.ShowText("Features of this encrypted PDF:");
            page.MoveTextPos(20, -22);
            page.ShowText("- Document requires password to open");
            page.MoveTextPos(0, -18);
            page.ShowText("- Uses AES-128 encryption algorithm");
            page.MoveTextPos(0, -18);
            page.ShowText("- Allows printing and copying");
            page.MoveTextPos(0, -18);
            page.ShowText("- Allows editing and annotations");
            page.MoveTextPos(0, -18);
            page.ShowText("- High security for sensitive documents");
            page.EndText();

            // Add footer
            page.SetFontAndSize(font, 10);
            page.BeginText();
            page.MoveTextPos(100, 100);
            page.ShowText("Generated by Haru Free PDF Library");
            page.EndText();

            // Set AES-128 encryption with all permissions
            pdf.SetEncryption(
                userPassword: "user123",
                ownerPassword: "owner456",
                permission: HpdfPermission.Print |
                           HpdfPermission.Edit |
                           HpdfPermission.Copy |
                           HpdfPermission.EditAnnotations,
                mode: HpdfEncryptMode.R4  // AES-128
            );

            // Save the document
            pdf.SaveToFile("pdfs/EncryptedSample.pdf");
        }

        private static void CreatePermissionPdf()
        {
            var pdf = new HpdfDocument();

            // Set document metadata
            pdf.Info.Title = "Limited Permissions Document";
            pdf.Info.Author = "Haru Free PDF Library";
            pdf.Info.Creator = "EncryptedDemo.cs";
            pdf.Info.SetCreationDate(DateTime.Now);

            // Create default font
            var font = new HpdfFont(pdf.Xref, HpdfStandardFont.Helvetica, "F1");

            // Add a page
            var page = pdf.AddPage();
            page.Width = 595;  // A4 width
            page.Height = 842; // A4 height

            // Draw border
            page.SetLineWidth(1);
            page.Rectangle(50, 50, 495, 742);
            page.Stroke();

            // Draw title
            page.SetFontAndSize(font, 24);
            page.BeginText();
            page.MoveTextPos(100, 750);
            page.ShowText("Permissions Demo PDF");
            page.EndText();

            // Draw content
            page.SetFontAndSize(font, 14);
            page.BeginText();
            page.MoveTextPos(100, 700);
            page.ShowText("Encryption: RC4 40-bit (Revision 2)");
            page.MoveTextPos(0, -25);
            page.ShowText("User Password: user123");
            page.MoveTextPos(0, -20);
            page.ShowText("Owner Password: owner456");
            page.MoveTextPos(0, -40);
            page.ShowText("This document has LIMITED permissions.");
            page.MoveTextPos(0, -20);
            page.ShowText("Only printing is allowed.");
            page.EndText();

            // Draw a warning box
            page.SetRgbFill(1.0f, 0.95f, 0.8f);
            page.SetRgbStroke(0.8f, 0.5f, 0.0f);
            page.SetLineWidth(2);
            page.Rectangle(80, 430, 435, 160);
            page.FillStroke();

            // Add permission information
            page.SetRgbFill(0.0f, 0.0f, 0.0f);
            page.SetFontAndSize(font, 12);
            page.BeginText();
            page.MoveTextPos(100, 565);
            page.ShowText("Permissions in this PDF:");
            page.MoveTextPos(20, -25);
            page.ShowText("[+] Printing is ALLOWED");
            page.MoveTextPos(0, -22);
            page.ShowText("[-] Copying text is NOT ALLOWED");
            page.MoveTextPos(0, -20);
            page.ShowText("[-] Editing is NOT ALLOWED");
            page.MoveTextPos(0, -20);
            page.ShowText("[-] Annotations are NOT ALLOWED");
            page.MoveTextPos(0, -20);
            page.ShowText("[-] Form filling is NOT ALLOWED");
            page.EndText();

            // Add test content
            page.SetFontAndSize(font, 11);
            page.BeginText();
            page.MoveTextPos(100, 400);
            page.ShowText("Try to copy this text in your PDF viewer.");
            page.MoveTextPos(0, -18);
            page.ShowText("If permissions are working correctly, copying should be blocked!");
            page.EndText();

            // Draw content box
            page.SetRgbFill(0.95f, 0.95f, 0.95f);
            page.SetRgbStroke(0.6f, 0.6f, 0.6f);
            page.SetLineWidth(1);
            page.Rectangle(80, 250, 435, 100);
            page.FillStroke();

            page.SetRgbFill(0.0f, 0.0f, 0.0f);
            page.SetFontAndSize(font, 10);
            page.BeginText();
            page.MoveTextPos(95, 320);
            page.ShowText("This is protected content that demonstrates document permissions.");
            page.MoveTextPos(0, -16);
            page.ShowText("The RC4 40-bit encryption provides basic security while allowing");
            page.MoveTextPos(0, -16);
            page.ShowText("fine-grained control over what users can do with the document.");
            page.MoveTextPos(0, -16);
            page.ShowText("This is useful for distributing documents that can be printed");
            page.MoveTextPos(0, -16);
            page.ShowText("but not copied or modified.");
            page.EndText();

            // Add footer
            page.SetFontAndSize(font, 10);
            page.BeginText();
            page.MoveTextPos(100, 100);
            page.ShowText("Generated by Haru Free PDF Library");
            page.EndText();

            // Set RC4 40-bit encryption with ONLY print permission
            pdf.SetEncryption(
                userPassword: "user123",
                ownerPassword: "owner456",
                permission: HpdfPermission.Print,  // Only print allowed
                mode: HpdfEncryptMode.R2  // RC4 40-bit
            );

            // Save the document
            pdf.SaveToFile("pdfs/PermissionSample.pdf");
        }
    }
}
